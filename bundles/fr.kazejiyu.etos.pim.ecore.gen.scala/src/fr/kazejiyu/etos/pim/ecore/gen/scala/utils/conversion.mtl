[**
 * 		Copyright 2017 Emmanuel CHEBBI
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */]
[comment encoding = UTF-8 /]
[**
 * Utility templates to deal with a file's path.
 */]
[module conversion('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')]

[** Generates the appropriate type of anETypedElement. */]
[template public genTypeName(anETypedElement: ETypedElement) post(trim())]
[anETypedElement.genScalaType()/]
[/template]

[** Generates the appropriate type if anEClass. */]
[template public genTypeName(anEClass: EClass) post(trim())]
[anEClass.name/]
[/template]

[** Modify the absolute class path aString to keep only the name of the class. */] 
[template private genSimpleName(aString: String) post(trim())]
[if (aString.contains('.'))]
	[aString.substring(aString.lastIndex('.') + 1)/]
[else]
	[aString/]
[/if]
[/template]

[** Generates the Scala type corresponding to anETypedElement's type. */]
[template private genScalaType(anETypedElement: ETypedElement) post(trim())]
[if (anETypedElement.lowerBound = 0 and anETypedElement.upperBound = 1)]
	Option['['/][anETypedElement.genDecl()/][']'/]
[elseif (anETypedElement.upperBound > 1)]
	[if (anETypedElement.ordered and anETypedElement.unique)]
		LinkedHashSet['['/][anETypedElement.genDecl()/][']'/]
	[elseif (anETypedElement.ordered)]
		List['['/][anETypedElement.genDecl()/][']'/]
	[elseif (anETypedElement.unique)]
		Set['['/][anETypedElement.genDecl()/][']'/]
	[/if]
[else]
	[anETypedElement.genDecl()/]
[/if]
[/template]

[comment]TODO Auto-import required classes to avoid using absolute classes' absolute path[/comment]
[template private genDecl(anETypedElement: ETypedElement) post(trim())]
[anETypedElement.eType.instanceTypeName.genScalaType()/]
[comment][anETypedElement.eType.instanceTypeName.genScalaType().genSimpleName()/][/comment]
[/template]

[template private genDecl(anEReference: EReference) post(trim())]
[anEReference.eReferenceType.name.genScalaType().genSimpleName()/]
[/template]

[** Generates the default value of anEAttribute. */]
[template public genDefaultValue(anEAttribute: EAttribute) post(trim())]
[if (anEAttribute.lowerBound = 0 and anEAttribute.upperBound = 1)]
	[if (anEAttribute.defaultValue.oclIsUndefined())]
		None
	[else]
		Some([anEAttribute.defaultValueLiteral/])
	[/if]
[elseif (anEAttribute.upperBound > 1)]
	[if (anEAttribute.ordered and anEAttribute.unique)]
		LinkedHashSet()
	[elseif (anEAttribute.ordered)]
		List()
	[elseif (anEAttribute.unique)]
		Set()
	[/if]
[else]
	[anEAttribute.defaultValueLiteral/]
[/if]
[/template]

[** Turns the type aString into a right Scala one. */]
[template public genScalaType(aString: String) post(trim())]
[if (aString = 'double')]scala.Double
[elseif (aString = 'java.lang.Double')]scala.Double
[elseif (aString = 'int')]scala.Int
[elseif (aString = 'java.lang.Int')]scala.Int
[elseif (aString = 'float')]scala.Float
[elseif (aString = 'java.lang.Float')]scala.Float
[else][aString /]
[/if]
[/template]