[**
 * 		Copyright 2017 Emmanuel CHEBBI
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */]
[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')]

[import fr::kazejiyu::etos::pim::ecore::gen::scala::attribute::generate /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::clazz::names /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::clazz::documentation /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::method::generate /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::utils::paths /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::utils::conversion /]

[** Generates the .scala file corresponding to the class */]
[template public genClassFile(aGenClass: GenClass)]
[file (aGenClass.genFilePath(), false, 'UTF-8')]
package [aGenClass.genPackage.basePackage/]

[aGenClass.genClassScalaDoc()/]
[aGenClass.genAbstract()/]class [aGenClass.genClassName()/] [aGenClass.genInheritance()/] [aGenClass.genGeneric()/] {

    [aGenClass.genFields()/]

    [aGenClass.genGetters()/]

    [aGenClass.genSetters()/]

    [aGenClass.genMethods()/]
}
[/file]
[/template]

[** Generates "abstract" if the class is abstract */]
[template private genAbstract(aGenClass: GenClass) post(replaceAll('\n', ''))]
[if (aGenClass.ecoreClass.abstract)]abstract [/if]
[/template]

[** Generates inheritance */]
[template private genInheritance(aGenClass: GenClass) post(trim())]
[if (not aGenClass.ecoreClass.eSuperTypes->isEmpty())]
[if (not aGenClass.parentClasses()->isEmpty())]
extends [aGenClass.parentClasses()->first().genTypeName()/][for (aMixin: EClass | aGenClass.mixins())] with [aMixin.genTypeName()/][/for]
[elseif (not aGenClass.mixins()->isEmpty())]
extends [aGenClass.firstMixin().genTypeName()/][for (aMixin: EClass | aGenClass.mixins()->excluding(aGenClass.firstMixin()))] with [aMixin.genTypeName()/][/for]
[/if]
[/if]
[/template]

[** Queries the parent of a given class */]
[query private parentClasses(aGenClass: GenClass): OrderedSet(EClass) = 
	aGenClass.ecoreClass.eSuperTypes->reject(anEClass: EClass | anEClass.interface)
/]

[** Returns the first mixin used by the class */]
[query private firstMixin(aGenClass: GenClass): EClass =
	aGenClass.mixins()->first()
/]

[** Queries the mixins used by the class */]
[query private mixins(aGenClass: GenClass): OrderedSet(EClass) =
	aGenClass.ecoreClass.eSuperTypes->select(anEClass: EClass | anEClass.interface)
/]

[** Generates the fields of a class */]
[template private genFields(aGenClass: GenClass) post(trim())]
[for (anEAttribute: EAttribute | aGenClass.ecoreClass.eAttributes)]
[anEAttribute.genField()/]

[/for]
[for (anEReference: EReference | aGenClass.ecoreClass.eReferences)]
[anEReference.genField()/]

[/for]
[/template]