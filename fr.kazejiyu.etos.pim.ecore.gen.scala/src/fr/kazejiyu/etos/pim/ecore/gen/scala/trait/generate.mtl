[**
 * 		Copyright 2017 Emmanuel CHEBBI
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */]
[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore', 'http://www.eclipse.org/emf/2002/GenModel')]

[import fr::kazejiyu::etos::pim::ecore::gen::scala::method::generate /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::trait::names /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::trait::documentation /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::utils::paths /]
[import fr::kazejiyu::etos::pim::ecore::gen::scala::utils::conversion /]

[** Generates the .scala file corresponding to the class */]
[template public genTraitFile(aGenClass: GenClass)]
[file (aGenClass.genFilePath(), false, 'UTF-8')]
package [aGenClass.genPackage.basePackage/]

[aGenClass.genScalaDoc()/]
trait [aGenClass.genClassName()/] [aGenClass.genInheritance()/] {
   [aGenClass.genSignatures()/]
}
[/file]
[/template]

[** Generates inheritance */]
[template private genInheritance(aGenClass: GenClass) post(trim())]
[if (not aGenClass.ecoreClass.eSuperTypes->isEmpty())]
[if (not aGenClass.mixins()->isEmpty())]
extends [aGenClass.firstMixin().genTypeName()/][for (aMixin: EClass | aGenClass.mixins()->excluding(aGenClass.firstMixin()))] with [aMixin.genTypeName()/][/for]
[/if]
[/if]
[/template]

[** Returns the first mixin used by the trait */]
[query private firstMixin(aGenClass: GenClass): EClass =
	aGenClass.mixins()->first()
/]

[** Queries the mixins used by the trait */]
[query private mixins(aGenClass: GenClass): OrderedSet(EClass) =
	aGenClass.ecoreClass.eSuperTypes->select(anEClass: EClass | anEClass.interface)
/]